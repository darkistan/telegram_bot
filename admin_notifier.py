import telebot
import logging
from typing import Optional
from config import (
    ADMIN_1_ID, ADMIN_2_ID, ADMIN_BOT_1_TOKEN, ADMIN_BOT_2_TOKEN,
    ADMIN_1_NOTIFICATIONS_ENABLED, ADMIN_2_NOTIFICATIONS_ENABLED
)
from constants import format_admin_message, LOG_MESSAGES

class AdminNotifier:
    """–ö–ª–∞—Å –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç—ñ–≤ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
    
    def __init__(self):
        self._admin_bot_1: Optional[telebot.TeleBot] = None
        self._admin_bot_2: Optional[telebot.TeleBot] = None
        self._bots_initialized = False
    
    def _initialize_bots(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –±–æ—Ç–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑)"""
        if self._bots_initialized:
            return
        
        if ADMIN_1_NOTIFICATIONS_ENABLED:
            try:
                self._admin_bot_1 = telebot.TeleBot(ADMIN_BOT_1_TOKEN)
                logging.info("–ë–æ—Ç –¥–ª—è ADMIN_1 —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞ –¥–ª—è ADMIN_1: {e}")
                self._admin_bot_1 = None
        
        if ADMIN_2_NOTIFICATIONS_ENABLED:
            try:
                self._admin_bot_2 = telebot.TeleBot(ADMIN_BOT_2_TOKEN)
                logging.info("–ë–æ—Ç –¥–ª—è ADMIN_2 —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞ –¥–ª—è ADMIN_2: {e}")
                self._admin_bot_2 = None
        
        self._bots_initialized = True
    
    def send_access_request_notification(self, user_info: dict):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø–∏—Ç –¥–æ—Å—Ç—É–ø—É"""
        self._initialize_bots()
        
        admin_message = (
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_info['first_name']} {user_info['last_name']} "
            f"({user_info['username']}) –∑ ID {user_info['id']} –∑–∞–ø—Ä–æ—Å–∏–≤ –¥–æ—Å—Ç—É–ø.\n"
            f"–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥—Ä–µ–¥–∞–≥—É–π—Ç–µ —Ñ–∞–π–ª routers.json –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É."
        )
        
        self._send_to_all_admins(admin_message)
    
    def send_script_execution_notification(self, execution_time: str, username: str, 
                                         router_name: str, script: str):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞"""
        self._initialize_bots()
        
        admin_message = format_admin_message(execution_time, username, router_name, script)
        self._send_to_all_admins(admin_message)
    
    def _send_to_all_admins(self, message: str):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∞–∫—Ç–∏–≤–Ω–∏–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        sent_count = 0
        
        if ADMIN_1_NOTIFICATIONS_ENABLED and self._admin_bot_1:
            try:
                self._admin_bot_1.send_message(ADMIN_1_ID, message)
                sent_count += 1
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ADMIN_1: {e}")
        
        if ADMIN_2_NOTIFICATIONS_ENABLED and self._admin_bot_2:
            try:
                self._admin_bot_2.send_message(ADMIN_2_ID, message)
                sent_count += 1
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ADMIN_2: {e}")
        
        if sent_count > 0:
            logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
        else:
            logging.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∂–æ–¥–Ω–æ–º—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    
    def get_notification_status(self) -> dict:
        """–û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        return {
            'admin_1_enabled': ADMIN_1_NOTIFICATIONS_ENABLED,
            'admin_2_enabled': ADMIN_2_NOTIFICATIONS_ENABLED,
            'admin_1_bot_ready': self._admin_bot_1 is not None,
            'admin_2_bot_ready': self._admin_bot_2 is not None
        }
    
    def test_connections(self) -> dict:
        """–¢–µ—Å—Ç—É—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
        self._initialize_bots()
        
        test_message = "üß™ –¢–µ—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è"
        results = {}
        
        if ADMIN_1_NOTIFICATIONS_ENABLED and self._admin_bot_1:
            try:
                self._admin_bot_1.send_message(ADMIN_1_ID, test_message)
                results['admin_1'] = 'success'
            except Exception as e:
                results['admin_1'] = f'error: {e}'
        else:
            results['admin_1'] = 'disabled'
        
        if ADMIN_2_NOTIFICATIONS_ENABLED and self._admin_bot_2:
            try:
                self._admin_bot_2.send_message(ADMIN_2_ID, test_message)
                results['admin_2'] = 'success'
            except Exception as e:
                results['admin_2'] = f'error: {e}'
        else:
            results['admin_2'] = 'disabled'
        
        return results
    
    def cleanup(self):
        """–û—á–∏—â–∞—î —Ä–µ—Å—É—Ä—Å–∏ –±–æ—Ç—ñ–≤"""
        if self._admin_bot_1:
            try:
                self._admin_bot_1.stop_polling()
            except:
                pass
            self._admin_bot_1 = None
        
        if self._admin_bot_2:
            try:
                self._admin_bot_2.stop_polling()
            except:
                pass
            self._admin_bot_2 = None
        
        self._bots_initialized = False
        logging.info("–†–µ—Å—É—Ä—Å–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∏—Ö –±–æ—Ç—ñ–≤ –æ—á–∏—â–µ–Ω–æ") 