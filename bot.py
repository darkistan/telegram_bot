import logging
import telebot
from datetime import datetime
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN, SCRIPT_PASSWORD_MODE
from fabric import Connection
from paramiko.ssh_exception import SSHException, AuthenticationException, NoValidConnectionsError

# –Ü–º–ø–æ—Ä—Ç –Ω–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤
from constants import MESSAGES, USER_STATES, LOG_MESSAGES, ACCESS_ACTIONS, get_user_info, get_current_time, is_positive_confirmation, is_negative_confirmation
from router_manager import RouterManager
from user_state_manager import UserStateManager
from admin_notifier import AdminNotifier
from keyboard_utils import create_router_keyboard, create_script_keyboard
from access_manager import AccessManager

# –ù–∞–ª–∞—à—Ç—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é
from logging.handlers import RotatingFileHandler

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_handler = RotatingFileHandler('logs/bot.log', maxBytes=10 * 1024 * 1024, backupCount=5)
log_handler.setLevel(logging.INFO)  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
formatter = logging.Formatter('%(asctime)s - %(message)s')
log_handler.setFormatter(formatter)

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –ª–æ–≥–µ—Ä
logging.getLogger().addHandler(log_handler)
logging.getLogger().setLevel(logging.INFO)

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π –ª–æ–≥–µ—Ä –¥–ª—è —Å–ø—Ä–æ–± –¥–æ—Å—Ç—É–ø—É
access_logger = logging.getLogger('access_attempts')
access_logger.setLevel(logging.INFO)
access_logger.propagate = False  # –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ –ª–æ–≥–∏ –≤ –∫–æ—Ä–µ–Ω–µ–≤–∏–π –ª–æ–≥–µ—Ä

# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ª–æ–≥—É —Ñ–∞–π–ª—É —Å–ø—Ä–æ–± –¥–æ—Å—Ç—É–ø—É
access_handler = RotatingFileHandler('logs/access_attempts.log', maxBytes=5 * 1024 * 1024, backupCount=3)
access_handler.setLevel(logging.INFO)
access_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
access_handler.setFormatter(access_formatter)

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –¥–æ –ª–æ–≥–µ—Ä–∞ —Å–ø—Ä–æ–± –¥–æ—Å—Ç—É–ø—É
access_logger.addHandler(access_handler)

def log_access_attempt(user_id, username, action, result, details=""):
    """
    –õ–æ–≥—É—î —Å–ø—Ä–æ–±—É –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    
    :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param username: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    :param action: –î—ñ—è, —è–∫—É –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    :param result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø—Ä–æ–±–∏ (SUCCESS/FAILED/BLOCKED)
    :param details: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–µ—Ç–∞–ª—ñ
    """
    user_info = f"ID: {user_id}"
    if username:
        user_info += f" | Username: @{username}"
    
    log_message = f"ACCESS_ATTEMPT | {user_info} | Action: {action} | Result: {result}"
    if details:
        log_message += f" | Details: {details}"
    
    access_logger.info(log_message)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
bot = telebot.TeleBot(BOT_TOKEN)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤
router_manager = RouterManager()
user_state_manager = UserStateManager()
admin_notifier = AdminNotifier()
access_manager = AccessManager()

# –ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ SSH —á–µ—Ä–µ–∑ Fabric
class RouterSSHClient:
    def __init__(self, ip: str, username: str, ssh_password: str, ssh_port: int = 22):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ SSH.
        
        :param ip: IP-–∞–¥—Ä–µ—Å–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
        :param username: –Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ SSH
        :param ssh_password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ SSH
        :param ssh_port: –ü–æ—Ä—Ç –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø–æ SSH (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 22)
        """
        self.ip = ip
        self.username = username
        self.ssh_password = ssh_password
        self.ssh_port = ssh_port  # –í—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ—Ä—Ç –¥–ª—è SSH

    def execute_script(self, script: str) -> str:
        """
        –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Ä–æ—É—Ç–µ—Ä—ñ —á–µ—Ä–µ–∑ SSH.
        
        :param script: –ù–∞–∑–≤–∞ —Å–∫—Ä–∏–ø—Ç–∞, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏
        :return: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
        """
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Fabric
            conn = Connection(
                host=self.ip, 
                user=self.username, 
                connect_kwargs={"password": self.ssh_password},  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ssh_password –¥–ª—è SSH-–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
                port=self.ssh_port  # –í–∫–∞–∑—É—î–º–æ –ø–æ—Ä—Ç –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            )
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ
            result = conn.run(f"/system script run {script}", hide=True)
            return result.stdout
        except AuthenticationException as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {e}")
            return "–ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–∞—Ä–æ–ª—è SSH."
        except NoValidConnectionsError as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
            return f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ IP-–∞–¥—Ä–µ—Å—ñ {self.ip} —Ç–∞ –ø–æ—Ä—Ç—É {self.ssh_port}."
        except SSHException as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ SSH: {e}")
            return f"–ü–æ–º–∏–ª–∫–∞ SSH: {e}"
        except Exception as e:
            logging.error(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —Å–∫—Ä–∏–ø—Ç–∞: {e}"

# –°—Ç–∞–Ω –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∑–∞–º—ñ–Ω–µ–Ω–æ –Ω–∞ user_state_manager)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, MESSAGES['start'])
    logging.info(LOG_MESSAGES['user_started'].format(message.from_user.username))

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /id –¥–ª—è –∑–∞–ø–∏—Ç—É –¥–æ—Å—Ç—É–ø—É
@bot.message_handler(commands=['id'])
def request_access(message):
    user_info = get_user_info(message)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∫–ª–∞—Å
    admin_notifier.send_access_request_notification(user_info)

    # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.reply_to(message, MESSAGES['access_request_sent'])

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
@bot.message_handler(commands=['manage_access'])
def manage_access(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not access_manager.is_admin(message.from_user.id):
        # –õ–æ–≥—É—î–º–æ —Å–ø—Ä–æ–±—É –¥–æ—Å—Ç—É–ø—É –¥–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
        log_access_attempt(
            message.from_user.id, 
            message.from_user.username, 
            "manage_access", 
            "BLOCKED", 
            "–°–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"
        )
        bot.reply_to(message, MESSAGES['access_no_permission'])
        return
    
    # –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
    log_access_attempt(
        message.from_user.id, 
        message.from_user.username, 
        "manage_access", 
        "SUCCESS", 
        "–î–æ—Å—Ç—É–ø –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏"
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º —Ä–æ—É—Ç–µ—Ä—ñ–≤
    keyboard = access_manager.create_management_keyboard()
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    routers_info = access_manager.get_all_routers_info()
    total_routers = len(routers_info)
    total_users = sum(info['users_count'] for info in routers_info.values())
    
    header_text = f"üîê **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
    header_text += f"üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
    header_text += f"üåê –†–æ—É—Ç–µ—Ä—ñ–≤: {total_routers}\n"
    header_text += f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n\n"
    header_text += f"üìã **–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:**"
    
    bot.reply_to(
        message,
        header_text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤–∏–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ–≤
@bot.message_handler(commands=['run_script'])
def send_router_selection(message):
    logging.info(LOG_MESSAGES['user_selected_command'].format(message.from_user.username))
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ—É—Ç–µ—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –∫–µ—à—É
    user_routers = router_manager.get_user_routers(message.from_user.id)
    
    if not user_routers:
        # –õ–æ–≥—É—î–º–æ —Å–ø—Ä–æ–±—É –¥–æ—Å—Ç—É–ø—É –±–µ–∑ –ø—Ä–∞–≤
        log_access_attempt(
            message.from_user.id, 
            message.from_user.username, 
            "run_script", 
            "BLOCKED", 
            "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∂–æ–¥–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞"
        )
        bot.reply_to(message, MESSAGES['no_access'])
        logging.info(LOG_MESSAGES['user_no_access'].format(message.from_user.username))
        return
    
    # –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
    log_access_attempt(
        message.from_user.id, 
        message.from_user.username, 
        "run_script", 
        "SUCCESS", 
        f"–î–æ—Å—Ç—É–ø –¥–æ {len(user_routers)} —Ä–æ—É—Ç–µ—Ä—ñ–≤"
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ—É—Ç–µ—Ä–∞
    keyboard = create_router_keyboard(user_routers)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä—ñ–≤
    bot.reply_to(message, MESSAGES['select_router'], reply_markup=keyboard)
    user_state_manager.set_waiting_for_router(message.from_user.id)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('router_'))
def handle_router_selection(call):
    router_name = call.data.split('_')[1]  # –ë–µ—Ä–µ–º–æ —ñ–º'—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –ø—ñ—Å–ª—è 'router_'
    
    # –õ–æ–≥—É—î–º–æ –≤–∏–±—ñ—Ä –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä: {router_name}")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–µ—à
    if not router_manager.user_has_access(call.from_user.id, router_name):
        # –õ–æ–≥—É—î–º–æ —Å–ø—Ä–æ–±—É –¥–æ—Å—Ç—É–ø—É –¥–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        log_access_attempt(
            call.from_user.id, 
            call.from_user.username, 
            f"access_router_{router_name}", 
            "BLOCKED", 
            f"–°–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}"
        )
        bot.send_message(call.message.chat.id, MESSAGES['router_not_found'])
        logging.error(f"–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä {router_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.from_user.username} –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    # –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Ä–æ—É—Ç–µ—Ä–∞
    log_access_attempt(
        call.from_user.id, 
        call.from_user.username, 
        f"access_router_{router_name}", 
        "SUCCESS", 
        f"–î–æ—Å—Ç—É–ø –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}"
    )
    
    # –õ–æ–≥—É—î–º–æ –≤–∏–±—ñ—Ä –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
    logging.info(LOG_MESSAGES['user_selected_router'].format(call.from_user.username, router_name))

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤–∏–±—Ä–∞–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä
    user_state_manager.set_waiting_for_script(call.from_user.id, router_name)

    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–∫—Ä–∏–ø—Ç–∏ –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –∑ –∫–µ—à—É
    scripts = router_manager.get_router_scripts(router_name)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Å–∫—Ä–∏–ø—Ç–∞
    keyboard = create_script_keyboard(router_name, scripts)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∏–±–æ—Ä—É —Å–∫—Ä–∏–ø—Ç–∞
    bot.send_message(call.message.chat.id, MESSAGES['select_script'].format(router_name), reply_markup=keyboard)

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–∫—Ä–∏–ø—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('script_'))
def handle_script_selection(call):
    router_name, script = call.data.split('_')[1], call.data.split('_')[2]

    if SCRIPT_PASSWORD_MODE:
        # –†–µ–∂–∏–º –∑ –ø–∞—Ä–æ–ª–µ–º
        bot.send_message(call.message.chat.id, MESSAGES['password_prompt'].format(script, router_name))
        user_state_manager.set_waiting_for_password(call.from_user.id, router_name, script)
    else:
        # –†–µ–∂–∏–º –∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º
        bot.send_message(call.message.chat.id, MESSAGES['confirmation_prompt'].format(script, router_name))
        user_state_manager.set_waiting_for_confirmation(call.from_user.id, router_name, script)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞
@bot.message_handler(func=lambda message: user_state_manager.is_in_state(message.from_user.id, USER_STATES['waiting_for_password']))
def verify_password_and_execute(message):
    router_name = user_state_manager.get_router_name(message.from_user.id)
    script = user_state_manager.get_script_name(message.from_user.id)

    if not router_name or not script:
        bot.reply_to(message, MESSAGES['error_router_not_found'])
        user_state_manager.clear_user_state(message.from_user.id)
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –∫–µ—à
    if router_manager.validate_script_password(router_name, message.text):
        execute_script_successfully(message, router_name, script)
    else:
        handle_wrong_password(message, script)

def execute_script_successfully(message, router_name: str, script: str):
    """–í–∏–∫–æ–Ω—É—î —Å–∫—Ä–∏–ø—Ç —É—Å–ø—ñ—à–Ω–æ"""
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –∫–µ—à—É
    connection_info = router_manager.get_router_connection_info(router_name)
    if not connection_info:
        bot.reply_to(message, MESSAGES['error_router_not_found'])
        user_state_manager.clear_user_state(message.from_user.id)
        return
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∫—Ä–∏–ø—Ç
    ssh_client = RouterSSHClient(
        connection_info['ip'], 
        connection_info['username'], 
        connection_info['ssh_password'], 
        connection_info['ssh_port']
    )
    result = ssh_client.execute_script(script)

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    execution_time = get_current_time()
    log_message = LOG_MESSAGES['script_executed'].format(script, router_name, execution_time)
    logging.info(log_message)

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∫–ª–∞—Å
    admin_notifier.send_script_execution_notification(execution_time, message.from_user.username, router_name, script)

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.reply_to(message, MESSAGES['script_result'].format(script, result))
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    user_state_manager.clear_user_state(message.from_user.id)

def handle_wrong_password(message, script: str):
    """–û–±—Ä–æ–±–ª—è—î –Ω–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å"""
    bot.reply_to(message, MESSAGES['wrong_password'])
    logging.warning(LOG_MESSAGES['wrong_password_attempt'].format(message.from_user.username, script))

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—Ä–µ–∂–∏–º –±–µ–∑ –ø–∞—Ä–æ–ª—è)
@bot.message_handler(func=lambda message: user_state_manager.is_in_state(message.from_user.id, USER_STATES['waiting_for_confirmation']))
def handle_confirmation_and_execute(message):
    router_name = user_state_manager.get_router_name(message.from_user.id)
    script = user_state_manager.get_script_name(message.from_user.id)
    
    if not router_name or not script:
        bot.reply_to(message, MESSAGES['error_router_not_found'])
        user_state_manager.clear_user_state(message.from_user.id)
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if is_positive_confirmation(message.text):
        execute_script_with_confirmation(message, router_name, script)
    elif is_negative_confirmation(message.text):
        handle_script_cancellation(message, router_name, script)
    else:
        bot.reply_to(message, MESSAGES['invalid_response'])
        return

def execute_script_with_confirmation(message, router_name: str, script: str):
    """–í–∏–∫–æ–Ω—É—î —Å–∫—Ä–∏–ø—Ç –≤ —Ä–µ–∂–∏–º—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è"""
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑ –∫–µ—à—É
    connection_info = router_manager.get_router_connection_info(router_name)
    if not connection_info:
        bot.reply_to(message, MESSAGES['error_router_not_found'])
        user_state_manager.clear_user_state(message.from_user.id)
        return
    
    # –í–∏–∫–æ–Ω—É—î–º–æ —Å–∫—Ä–∏–ø—Ç –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    ssh_client = RouterSSHClient(
        connection_info['ip'], 
        connection_info['username'], 
        connection_info['ssh_password'], 
        connection_info['ssh_port']
    )
    result = ssh_client.execute_script(script)

    # –õ–æ–≥—É–≤–∞–Ω–Ω—è
    execution_time = get_current_time()
    log_message = LOG_MESSAGES['script_executed_confirmation'].format(script, router_name, execution_time)
    logging.info(log_message)

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –∫–ª–∞—Å
    admin_notifier.send_script_execution_notification(execution_time, message.from_user.username, router_name, script)

    # –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    bot.reply_to(message, MESSAGES['script_success'].format(script, result))
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_state_manager.clear_user_state(message.from_user.id)

def handle_script_cancellation(message, router_name: str, script: str):
    """–û–±—Ä–æ–±–ª—è—î —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞"""
    bot.reply_to(message, MESSAGES['script_cancelled'])
    logging.info(LOG_MESSAGES['script_cancelled_by_user'].format(message.from_user.username, script, router_name))
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_state_manager.clear_user_state(message.from_user.id)

# –û–±—Ä–æ–±–∫–∞ callback-–∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º
@bot.callback_query_handler(func=lambda call: call.data.startswith('access_'))
def handle_access_management(call):
    if not access_manager.is_admin(call.from_user.id):
        # –õ–æ–≥—É—î–º–æ —Å–ø—Ä–æ–±—É –¥–æ—Å—Ç—É–ø—É –¥–æ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
        log_access_attempt(
            call.from_user.id, 
            call.from_user.username, 
            f"access_callback_{call.data}", 
            "BLOCKED", 
            "–°–ø—Ä–æ–±–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º"
        )
        bot.answer_callback_query(call.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º")
        return
    
    # –õ–æ–≥—É—î–º–æ —É—Å–ø—ñ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    log_access_attempt(
        call.from_user.id, 
        call.from_user.username, 
        f"access_callback_{call.data}", 
        "SUCCESS", 
        "–î–æ—Å—Ç—É–ø –¥–æ —Ñ—É–Ω–∫—Ü—ñ–π —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º"
    )
    
    action = call.data.split('_')[1]
    
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É —Ä–æ—É—Ç–µ—Ä—ñ–≤"
    if call.data == "access_main_menu" or (len(call.data.split('_')) >= 3 and call.data.split('_')[1] == 'main' and call.data.split('_')[2] == 'menu'):
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ –ø–µ—Ä–µ–ª—ñ–∫–æ–º —Ä–æ—É—Ç–µ—Ä—ñ–≤
        keyboard = access_manager.create_management_keyboard()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        routers_info = access_manager.get_all_routers_info()
        total_routers = len(routers_info)
        total_users = sum(info['users_count'] for info in routers_info.values())
        
        header_text = f"üîê **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**\n\n"
        header_text += f"üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        header_text += f"üåê –†–æ—É—Ç–µ—Ä—ñ–≤: {total_routers}\n"
        header_text += f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n\n"
        header_text += f"üìã **–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:**"
        
        safe_edit_message_text(bot, header_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
    
    elif action == 'manage':
        # access_manage_{router_name} - –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä–æ–º
        parts = call.data.split('_', 2)
        if len(parts) >= 3:
            router_name = parts[2]
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä
            routers_info = access_manager.get_all_routers_info()
            if router_name in routers_info:
                info = routers_info[router_name]
                header_text = f"üîê **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä–æ–º {router_name}**\n\n"
                header_text += f"üåê **IP:** `{info['ip']}`\n"
                header_text += f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {info['users_count']}\n"
                header_text += f"üñ•Ô∏è **–°–∫—Ä–∏–ø—Ç–∏:** {', '.join(info['scripts'])}\n\n"
                header_text += f"üìã **–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:**"
            else:
                header_text = f"üîê **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä–æ–º {router_name}**\n\nüìã **–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:**"
            
            keyboard = access_manager.create_router_management_keyboard(router_name)
            safe_edit_message_text(bot, header_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    elif action == 'general_info':
        keyboard = access_manager.create_general_info_keyboard()
        safe_edit_message_text(bot, "üìã –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–∏—Å—Ç–µ–º—É:", call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    
    elif action == 'list_all_users':
        routers_info = access_manager.get_all_routers_info()
        if routers_info:
            info_text = "üìã –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø–æ —Ä–æ—É—Ç–µ—Ä–∞—Ö:\n\n"
            for router_name, info in routers_info.items():
                users_list = ", ".join(info['allowed_users']) if info['allowed_users'] else "–Ω–µ–º–∞—î"
                info_text += f"**{router_name}**: {users_list}\n"
            
            safe_edit_message_text(bot, info_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        else:
            safe_edit_message_text(bot, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", call.message.chat.id, call.message.message_id)
    
    elif action == 'router_info':
        routers_info = access_manager.get_all_routers_info()
        if routers_info:
            info_text = MESSAGES['access_router_info'].format("")
            for router_name, info in routers_info.items():
                info_text += f"**{router_name}**\n"
                info_text += f"IP: {info['ip']}\n"
                info_text += f"–°–∫—Ä–∏–ø—Ç–∏: {', '.join(info['scripts'])}\n"
                info_text += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {info['users_count']}\n\n"
            
            safe_edit_message_text(bot, info_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        else:
            safe_edit_message_text(bot, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä–∏", call.message.chat.id, call.message.message_id)
    
    elif action == 'all_routers_info':
        routers_info = access_manager.get_all_routers_info()
        if routers_info:
            info_text = "üåê **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—Å—ñ —Ä–æ—É—Ç–µ—Ä–∏:**\n\n"
            for router_name, info in routers_info.items():
                info_text += f"**{router_name}**\n"
                info_text += f"IP: `{info['ip']}`\n"
                info_text += f"–°–∫—Ä–∏–ø—Ç–∏: {', '.join(info['scripts'])}\n"
                info_text += f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {info['users_count']}\n\n"
            
            safe_edit_message_text(bot, info_text, call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        else:
            safe_edit_message_text(bot, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä–∏", call.message.chat.id, call.message.message_id)
    
    elif action == 'stats':
        routers_info = access_manager.get_all_routers_info()
        if routers_info:
            total_routers = len(routers_info)
            total_users = sum(info['users_count'] for info in routers_info.values())
            total_scripts = sum(len(info['scripts']) for info in routers_info.values())
            
            stats_text = f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–∏:**\n\n"
            stats_text += f"üåê **–†–æ—É—Ç–µ—Ä—ñ–≤:** {total_routers}\n"
            stats_text += f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {total_users}\n"
            stats_text += f"üñ•Ô∏è **–°–∫—Ä–∏–ø—Ç—ñ–≤:** {total_scripts}\n\n"
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–æ—É—Ç–µ—Ä–∞—Ö
            stats_text += "üìã **–î–µ—Ç–∞–ª—ñ –ø–æ —Ä–æ—É—Ç–µ—Ä–∞—Ö:**\n"
            for router_name, info in routers_info.items():
                stats_text += f"‚Ä¢ **{router_name}**: {info['users_count']} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, {len(info['scripts'])} —Å–∫—Ä–∏–ø—Ç—ñ–≤\n"
            
            keyboard = access_manager.create_management_keyboard()
            safe_edit_message_text(bot, stats_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        else:
            safe_edit_message_text(bot, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", call.message.chat.id, call.message.message_id)
    
    elif action == 'refresh':
        # –û—á–∏—â–∞—î–º–æ –∫–µ—à —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
        access_manager.router_manager.clear_cache()
        routers_info = access_manager.get_all_routers_info()
        
        if routers_info:
            total_routers = len(routers_info)
            total_users = sum(info['users_count'] for info in routers_info.values())
            
            header_text = f"üîÑ **–ö–µ—à –æ–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
            header_text += f"üìä **–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            header_text += f"üåê –†–æ—É—Ç–µ—Ä—ñ–≤: {total_routers}\n"
            header_text += f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n\n"
            header_text += f"üìã **–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:**"
            
            keyboard = access_manager.create_management_keyboard()
            safe_edit_message_text(bot, header_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É")
    
    # –û–±—Ä–æ–±–∫–∞ –¥—ñ–π –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ä–æ—É—Ç–µ—Ä–æ–º
    elif action == 'view':
        # –§–æ—Ä–º–∞—Ç: access_view_users_{router_name}
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            success, users = access_manager.get_router_users(router_name)
            
            if success and users:
                users_list = "\n".join([f"‚Ä¢ {user_id}" for user_id in users])
                message_text = f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}**:\n\n{users_list}"
            else:
                message_text = f"üë• **–£ —Ä–æ—É—Ç–µ—Ä–∞ {router_name} –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤**"
            
            keyboard = access_manager.create_router_management_keyboard(router_name)
            safe_edit_message_text(bot, message_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    elif action == 'router_details':
        # –§–æ—Ä–º–∞—Ç: access_router_details_{router_name}
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            routers_info = access_manager.get_all_routers_info()
            
            if router_name in routers_info:
                info = routers_info[router_name]
                message_text = f"üìä **–î–µ—Ç–∞–ª—ñ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}**:\n\n"
                message_text += f"üåê **IP:** `{info['ip']}`\n"
                message_text += f"üñ•Ô∏è **–°–∫—Ä–∏–ø—Ç–∏:** {', '.join(info['scripts'])}\n"
                message_text += f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {info['users_count']}\n"
                message_text += f"üìã **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:** {', '.join(info['allowed_users']) if info['allowed_users'] else '–Ω–µ–º–∞—î'}"
            else:
                message_text = f"‚ùå **–†–æ—É—Ç–µ—Ä {router_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ**"
            
            keyboard = access_manager.create_router_management_keyboard(router_name)
            safe_edit_message_text(bot, message_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    elif action == 'refresh_router':
        # –§–æ—Ä–º–∞—Ç: access_refresh_router_{router_name}
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            
            # –û—á–∏—â–∞—î–º–æ –∫–µ—à —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ
            access_manager.router_manager.clear_cache()
            routers_info = access_manager.get_all_routers_info()
            
            if router_name in routers_info:
                info = routers_info[router_name]
                
                # –§–æ—Ä–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                header_text = f"üîÑ **–î–∞–Ω—ñ —Ä–æ—É—Ç–µ—Ä–∞ {router_name} –æ–Ω–æ–≤–ª–µ–Ω–æ!**\n\n"
                header_text += f"üåê **IP:** `{info['ip']}`\n"
                header_text += f"üë• **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:** {info['users_count']}\n"
                header_text += f"üñ•Ô∏è **–°–∫—Ä–∏–ø—Ç–∏:** {', '.join(info['scripts'])}\n\n"
                header_text += f"üìã **–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:**"
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
                keyboard = access_manager.create_router_management_keyboard(router_name)
                
                safe_edit_message_text(bot, header_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard, parse_mode='Markdown')
            else:
                bot.answer_callback_query(call.id, f"‚ùå –†–æ—É—Ç–µ—Ä {router_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    # –û–±—Ä–æ–±–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
    elif action in ['add', 'remove']:
        # –§–æ—Ä–º–∞—Ç: access_add_user_{router_name} –∞–±–æ access_remove_user_{router_name}
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            operation = '–¥–æ–¥–∞–≤–∞–Ω–Ω—è' if action == 'add' else '–≤–∏–¥–∞–ª–µ–Ω–Ω—è'
            state_key = f'waiting_for_user_id_{action}'
            user_state_manager.set_state(call.from_user.id, state_key, router_name=router_name)
            
            bot.edit_message_text(
                f"üìù –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è {operation} –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}:",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    # –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏)
    elif action == 'view_users':
        # –§–æ—Ä–º–∞—Ç: access_view_users_{router_name}
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            success, users = access_manager.get_router_users(router_name)
            
            if success and users:
                users_list = "\n".join([f"‚Ä¢ {user_id}" for user_id in users])
                message_text = f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}:\n\n{users_list}"
            else:
                message_text = f"üë• –£ —Ä–æ—É—Ç–µ—Ä–∞ {router_name} –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
            
            keyboard = access_manager.create_router_management_keyboard(router_name)
            safe_edit_message_text(bot, message_text, call.message.chat.id, call.message.message_id, reply_markup=keyboard)
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    elif action == 'add_user':
        # –§–æ—Ä–º–∞—Ç: access_add_user_{router_name}
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            user_state_manager.set_state(call.from_user.id, 'waiting_for_user_id_add', router_name=router_name)
            
            bot.edit_message_text(
                f"üìù –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}:",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    elif action == 'remove_user':
        # –§–æ—Ä–º–∞—Ç: access_remove_user_{router_name}
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            user_state_manager.set_state(call.from_user.id, 'waiting_for_user_id_remove', router_name=router_name)
            
            bot.edit_message_text(
                f"üìù –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}:",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤ callback
    elif action == 'add':
        # –§–æ—Ä–º–∞—Ç: access_add_user_{router_name} (—è–∫—â–æ —Ä–æ–∑–±–∏—Ç–æ –ø–æ-—ñ–Ω—à–æ–º—É)
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            user_state_manager.set_state(call.from_user.id, 'waiting_for_user_id_add', router_name=router_name)
            
            bot.edit_message_text(
                f"üìù –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}:",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
    
    elif action == 'remove':
        # –§–æ—Ä–º–∞—Ç: access_remove_user_{router_name} (—è–∫—â–æ —Ä–æ–∑–±–∏—Ç–æ –ø–æ-—ñ–Ω—à–æ–º—É)
        parts = call.data.split('_', 3)
        if len(parts) >= 4:
            router_name = parts[3]
            user_state_manager.set_state(call.from_user.id, 'waiting_for_user_id_remove', router_name=router_name)
            
            bot.edit_message_text(
                f"üìù –í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}:",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.answer_callback_query(call.id, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")

# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.message_handler(func=lambda message: user_state_manager.get_state(message.from_user.id) and 
                    user_state_manager.get_state(message.from_user.id).startswith('waiting_for_user_id_'))
def handle_user_id_input(message):
    state = user_state_manager.get_state(message.from_user.id)
    
    # –í–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ª–æ–≥—ñ–∫—É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥—ñ—ó
    if state == 'waiting_for_user_id_add':
        action = 'add'
    elif state == 'waiting_for_user_id_remove':
        action = 'remove'
    else:
        action = 'unknown'
    
    router_name = user_state_manager.get_user_data(message.from_user.id, 'router_name')
    user_id = message.text.strip()
    
    if not router_name:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ä–æ—É—Ç–µ—Ä–∞")
        user_state_manager.clear_user_state(message.from_user.id)
        return
    
    if not access_manager.validate_user_id(user_id):
        bot.reply_to(message, MESSAGES['access_invalid_user_id'])
        return
    
    if action == 'add':
        success, message_text = access_manager.add_user_access(router_name, user_id)
        # –õ–æ–≥—É—î–º–æ —Å–ø—Ä–æ–±—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        log_access_attempt(
            message.from_user.id, 
            message.from_user.username, 
            f"add_user_{router_name}", 
            "SUCCESS" if success else "FAILED", 
            f"–°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}"
        )
    elif action == 'remove':
        success, message_text = access_manager.remove_user_access(router_name, user_id)
        # –õ–æ–≥—É—î–º–æ —Å–ø—Ä–æ–±—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        log_access_attempt(
            message.from_user.id, 
            message.from_user.username, 
            f"remove_user_{router_name}", 
            "SUCCESS" if success else "FAILED", 
            f"–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}"
        )
    else:
        bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")
        user_state_manager.clear_user_state(message.from_user.id)
        return
    
    if success:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä–æ–º
        keyboard = access_manager.create_router_management_keyboard(router_name)
        bot.reply_to(message, f"{message_text}\n\nüîô –ü–æ–≤–µ—Ä—Ç–∞—é—Å—è –¥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ—É—Ç–µ—Ä–æ–º {router_name}", 
                    reply_markup=keyboard)
    else:
        bot.reply_to(message, message_text)
    
    # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user_state_manager.clear_user_state(message.from_user.id)

def safe_edit_message_text(bot, text, chat_id, message_id, reply_markup=None, parse_mode=None):
    """–ë–µ–∑–ø–µ—á–Ω–æ —Ä–µ–¥–∞–≥—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–∫–∏ 'message is not modified'"""
    try:
        bot.edit_message_text(
            text,
            chat_id,
            message_id,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
    except Exception as e:
        if "message is not modified" in str(e):
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–º—ñ–Ω–∏–ª–æ—Å—è - —Ü–µ –Ω–µ –ø–æ–º–∏–ª–∫–∞
            pass
        else:
            # –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ - –ª–æ–≥—É—î–º–æ
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
            # –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            try:
                bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
            except Exception as send_error:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {send_error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    logging.info(LOG_MESSAGES['bot_started'])
    
    # –õ–æ–≥—É—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    notification_status = admin_notifier.get_notification_status()
    for admin_num, status in notification_status.items():
        if 'enabled' in admin_num:
            admin_id = admin_num.split('_')[1]
            enabled = '–≤–∫–ª—é—á–µ–Ω—ñ' if status else '–≤—ñ–¥–∫–ª—é—á–µ–Ω—ñ'
            logging.info(LOG_MESSAGES['notifications_status'].format(admin_id, enabled))
    
    logging.info(LOG_MESSAGES['script_mode_status'].format(
        '–∑ –ø–∞—Ä–æ–ª–µ–º' if SCRIPT_PASSWORD_MODE else '–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º'
    ))
    
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        admin_notifier.cleanup()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–±–æ—Ç—ñ –±–æ—Ç–∞: {e}")
        admin_notifier.cleanup()
