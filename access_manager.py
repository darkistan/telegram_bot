import json
import logging
from typing import Dict, List, Optional, Tuple
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from router_manager import RouterManager

class AccessManager:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ —Ä–æ—É—Ç–µ—Ä—ñ–≤"""
    
    def __init__(self, config_file: str = 'routers.json'):
        self.config_file = config_file
        self.router_manager = RouterManager(config_file)
    
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
        admin_ids = self._get_admin_ids()
        return str(user_id) in admin_ids
    
    def _get_admin_ids(self) -> List[str]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as file:
                config = json.load(file)
                return config.get('admins', ['440127888'])  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {e}")
            return ['440127888']
    
    def add_user_access(self, router_name: str, user_id: str) -> Tuple[bool, str]:
        """–î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as file:
                config = json.load(file)
            
            if router_name not in config:
                return False, f"–†–æ—É—Ç–µ—Ä '{router_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            if 'allowed_users' not in config[router_name]:
                config[router_name]['allowed_users'] = []
            
            if user_id in config[router_name]['allowed_users']:
                return False, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
            config[router_name]['allowed_users'].append(user_id)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
            with open(self.config_file, 'w', encoding='utf-8') as file:
                json.dump(config, file, indent=2, ensure_ascii=False)
            
            # –û—á–∏—â–∞—î–º–æ –∫–µ—à —Ä–æ—É—Ç–µ—Ä—ñ–≤
            self.router_manager.clear_cache()
            
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}")
            return True, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}"
    
    def remove_user_access(self, router_name: str, user_id: str) -> Tuple[bool, str]:
        """–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as file:
                config = json.load(file)
            
            if router_name not in config:
                return False, f"–†–æ—É—Ç–µ—Ä '{router_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            if 'allowed_users' not in config[router_name]:
                return False, f"–£ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}' –Ω–µ–º–∞—î —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
            
            if user_id not in config[router_name]['allowed_users']:
                return False, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
            config[router_name]['allowed_users'].remove(user_id)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
            with open(self.config_file, 'w', encoding='utf-8') as file:
                json.dump(config, file, indent=2, ensure_ascii=False)
            
            # –û—á–∏—â–∞—î–º–æ –∫–µ—à —Ä–æ—É—Ç–µ—Ä—ñ–≤
            self.router_manager.clear_cache()
            
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}")
            return True, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}"
    
    def get_router_users(self, router_name: str) -> Tuple[bool, List[str]]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as file:
                config = json.load(file)
            
            if router_name not in config:
                return False, []
            
            return True, config[router_name].get('allowed_users', [])
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, []
    
    def get_all_routers_info(self) -> Dict[str, Dict]:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ —Ä–æ—É—Ç–µ—Ä–∏ —Ç–∞ —ó—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
        try:
            with open(self.config_file, 'r', encoding='utf-8') as file:
                config = json.load(file)
            
            routers_info = {}
            for router_name, router_data in config.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ –Ω–µ-—Ä–æ—É—Ç–µ—Ä–∏
                if router_name == 'admins' or not isinstance(router_data, dict):
                    continue
                
                routers_info[router_name] = {
                    'ip': router_data.get('ip', 'N/A'),
                    'scripts': router_data.get('scripts', []),
                    'users_count': len(router_data.get('allowed_users', [])),
                    'allowed_users': router_data.get('allowed_users', [])
                }
            
            return routers_info
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä–∏: {e}")
            return {}
    
    def create_management_keyboard(self) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º - –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î —Ä–æ—É—Ç–µ—Ä–∏"""
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä—ñ–≤
        routers = self.router_manager.get_routers()
        
        for router_name, router_data in routers.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ –Ω–µ-—Ä–æ—É—Ç–µ—Ä–∏
            if router_name == 'admins' or not isinstance(router_data, dict):
                continue
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä
            ip = router_data.get('ip', 'N/A')
            users_count = len(router_data.get('allowed_users', []))
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            button_text = f"üåê {router_name}\nüì° {ip} | üë• {users_count}"
            
            callback_data = f"access_manage_{router_name}"
            keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–µ—à–µ–º
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à", callback_data="access_refresh_cache"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="access_stats")
        )
        
        return keyboard
    
    def create_router_management_keyboard(self, router_name: str) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ä–æ—É—Ç–µ—Ä–æ–º - 3 –∫–Ω–æ–ø–∫–∏"""
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        success, users = self.get_router_users(router_name)
        users_count = len(users) if success else 0
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä
        routers = self.router_manager.get_routers()
        router_info = routers.get(router_name, {})
        router_ip = router_info.get('ip', 'N/A')
        
        # 3 –æ—Å–Ω–æ–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ —è–∫ –∑–∞–ø–∏—Ç–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        keyboard.add(
            InlineKeyboardButton(f"üë• –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ ({users_count})", callback_data=f"access_view_users_{router_name}")
        )
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"access_add_user_{router_name}")
        )
        keyboard.add(
            InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"access_remove_user_{router_name}")
        )
        keyboard.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É —Ä–æ—É—Ç–µ—Ä—ñ–≤", callback_data="access_main_menu")
        )
        
        return keyboard
    
    def create_router_selection_keyboard(self, action: str) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–æ—É—Ç–µ—Ä–∞"""
        routers = self.router_manager.get_routers()
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        for router_name, router_data in routers.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ –Ω–µ-—Ä–æ—É—Ç–µ—Ä–∏
            if router_name == 'admins' or not isinstance(router_data, dict):
                continue
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä
            ip = router_data.get('ip', 'N/A')
            users_count = len(router_data.get('allowed_users', []))
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            button_text = f"üåê {router_name}\nüì° {ip} | üë• {users_count}"
            
            callback_data = f"access_{action}_{router_name}"
            keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))
        
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="access_main_menu"))
        
        return keyboard
    
    def create_general_info_keyboard(self) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
        keyboard = InlineKeyboardMarkup(row_width=2)
        
        keyboard.add(
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="access_list_all_users"),
            InlineKeyboardButton("üåê –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—Å—ñ —Ä–æ—É—Ç–µ—Ä–∏", callback_data="access_all_routers_info")
        )
        keyboard.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="access_main_menu")
        )
        
        return keyboard
    
    def validate_user_id(self, user_id: str) -> bool:
        """–í–∞–ª—ñ–¥—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü–µ —á–∏—Å–ª–æ
            int(user_id)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É (Telegram ID –∑–∞–∑–≤–∏—á–∞–π 7-10 —Ü–∏—Ñ—Ä)
            return 7 <= len(user_id) <= 10
        except ValueError:
            return False
    
    def get_user_access_summary(self, user_id: str) -> str:
        """–û—Ç—Ä–∏–º—É—î –∑–≤–µ–¥–µ–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        routers = self.router_manager.get_routers()
        user_routers = []
        
        for router_name, router_data in routers.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ –Ω–µ-—Ä–æ—É—Ç–µ—Ä–∏
            if router_name == 'admins' or not isinstance(router_data, dict):
                continue
            
            if user_id in router_data.get('allowed_users', []):
                user_routers.append(router_name)
        
        if not user_routers:
            return f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∂–æ–¥–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞"
        
        return f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ä–æ—É—Ç–µ—Ä—ñ–≤:\n" + "\n".join([f"‚Ä¢ {router}" for router in user_routers]) 