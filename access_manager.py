import json
import logging
from typing import Dict, List, Tuple, Any, Optional
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from router_manager import RouterManager

class AccessManager:
    """–ö–ª–∞—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–æ —Ä–æ—É—Ç–µ—Ä—ñ–≤"""
    
    def __init__(self, config_file: str):
        self.config_file = config_file
        self.router_manager = RouterManager(config_file)
    
    def is_admin(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–µ—Ä–µ–∑ router_manager
        admin_ids = self._get_admin_ids()
        return str(user_id) in admin_ids
    
    def _get_admin_ids(self) -> List[str]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–µ—à"""
        try:
            routers = self.router_manager.get_routers()
            return routers.get('admins', ['440127888'])  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤: {e}")
            return ['440127888']
    
    def add_user_access(self, router_name: str, user_id: str) -> Tuple[bool, str]:
        """–î–æ–¥–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ router_manager
            routers = self.router_manager.get_routers()
            
            if router_name not in routers:
                return False, f"–†–æ—É—Ç–µ—Ä '{router_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            if 'allowed_users' not in routers[router_name]:
                routers[router_name]['allowed_users'] = []
            
            if user_id in routers[router_name]['allowed_users']:
                return False, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –º–∞—î –¥–æ—Å—Ç—É–ø –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
            # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            routers[router_name]['allowed_users'].append(user_id)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ —Ñ–∞–π–ª
            self._save_routers_to_file(routers)
            
            # –û—á–∏—â–∞—î–º–æ –∫–µ—à –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            self.router_manager.clear_cache()
            
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}")
            return True, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}"
    
    def remove_user_access(self, router_name: str, user_id: str) -> Tuple[bool, str]:
        """–í–∏–¥–∞–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ router_manager
            routers = self.router_manager.get_routers()
            
            if router_name not in routers:
                return False, f"–†–æ—É—Ç–µ—Ä '{router_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            if 'allowed_users' not in routers[router_name]:
                return False, f"–£ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}' –Ω–µ–º–∞—î —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"
            
            if user_id not in routers[router_name]['allowed_users']:
                return False, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
            # –í–∏–¥–∞–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            routers[router_name]['allowed_users'].remove(user_id)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ —Ñ–∞–π–ª
            self._save_routers_to_file(routers)
            
            # –û—á–∏—â–∞—î–º–æ –∫–µ—à –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            self.router_manager.clear_cache()
            
            logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}")
            return True, f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}"
    
    def get_router_users(self, router_name: str) -> Tuple[bool, List[str]]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–µ—à"""
        try:
            router = self.router_manager.get_router(router_name)
            if not router:
                return False, []
            
            return True, router.get('allowed_users', [])
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, []
    
    def get_all_routers_info(self) -> Dict[str, Dict]:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ —Ä–æ—É—Ç–µ—Ä–∏ —Ç–∞ —ó—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —á–µ—Ä–µ–∑ –∫–µ—à"""
        try:
            routers = self.router_manager.get_routers()
            
            routers_info = {}
            for router_name, router_data in routers.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ –Ω–µ-—Ä–æ—É—Ç–µ—Ä–∏
                if router_name == 'admins' or not isinstance(router_data, dict):
                    continue
                
                routers_info[router_name] = {
                    'ip': router_data.get('ip', 'N/A'),
                    'scripts': router_data.get('scripts', []),
                    'users_count': len(router_data.get('allowed_users', [])),
                    'allowed_users': router_data.get('allowed_users', [])
                }
            
            return routers_info
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä–∏: {e}")
            return {}
    
    def create_management_keyboard(self) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–æ—Å—Ç—É–ø–æ–º - –æ–¥—Ä–∞–∑—É –ø–æ–∫–∞–∑—É—î —Ä–æ—É—Ç–µ—Ä–∏"""
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ —Ä–æ—É—Ç–µ—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–µ—à
        routers = self.router_manager.get_routers()
        
        for router_name, router_data in routers.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ —Ç–∞ —ñ–Ω—à—ñ –Ω–µ-—Ä–æ—É—Ç–µ—Ä–∏
            if router_name == 'admins' or not isinstance(router_data, dict):
                continue
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ—É—Ç–µ—Ä
            ip = router_data.get('ip', 'N/A')
            users_count = len(router_data.get('allowed_users', []))
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
            button_text = f"üåê {router_name}\nüì° {ip} | üë• {users_count}"
            
            keyboard.add(
                InlineKeyboardButton(
                    button_text,
                    callback_data=f"access_router_details_{router_name}"
                )
            )
        
        # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        keyboard.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="access_stats")
        )
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à", callback_data="access_refresh_cache")
        )
        
        return keyboard
    
    def create_router_management_keyboard(self, router_name: str) -> InlineKeyboardMarkup:
        """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º —Ä–æ—É—Ç–µ—Ä–æ–º"""
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–µ—à
        router = self.router_manager.get_router(router_name)
        if not router:
            return keyboard
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ç–∞ —Å–∫—Ä–∏–ø—Ç—ñ–≤
        users_count = len(router.get('allowed_users', []))
        scripts_count = len(router.get('scripts', []))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        keyboard.add(
            InlineKeyboardButton(f"üë• –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ ({users_count})", callback_data=f"access_view_users_{router_name}")
        )
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"access_add_user_{router_name}")
        )
        keyboard.add(
            InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data=f"access_remove_user_{router_name}")
        )
        
        # –†–æ–∑–¥—ñ–ª—é–≤–∞—á
        keyboard.add(
            InlineKeyboardButton("‚îÄ" * 20, callback_data="access_separator")
        )
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞–º–∏
        keyboard.add(
            InlineKeyboardButton(f"üìú –°–∫—Ä–∏–ø—Ç–∏ ({scripts_count})", callback_data=f"access_viewscripts_{router_name}")
        )
        keyboard.add(
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç", callback_data=f"access_addscript_{router_name}")
        )
        keyboard.add(
            InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç", callback_data=f"access_removescript_{router_name}")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–Ω–æ–≤–∏—Ç–∏ –∫–µ—à —Ä–æ—É—Ç–µ—Ä–∞", callback_data=f"access_refresh_router_{router_name}")
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="access_back_to_list")
        )
        
        return keyboard
    
    def add_script_to_router(self, router_name: str, script_name: str) -> Tuple[bool, str]:
        """–î–æ–¥–∞—î —Å–∫—Ä–∏–ø—Ç –¥–æ —Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ router_manager
            routers = self.router_manager.get_routers()
            
            if router_name not in routers:
                return False, f"–†–æ—É—Ç–µ—Ä '{router_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            if 'scripts' not in routers[router_name]:
                routers[router_name]['scripts'] = []
            
            if script_name in routers[router_name]['scripts']:
                return False, f"–°–∫—Ä–∏–ø—Ç '{script_name}' –≤–∂–µ —ñ—Å–Ω—É—î –≤ —Ä–æ—É—Ç–µ—Ä—ñ '{router_name}'"
            
            # –î–æ–¥–∞—î–º–æ —Å–∫—Ä–∏–ø—Ç
            routers[router_name]['scripts'].append(script_name)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ —Ñ–∞–π–ª
            self._save_routers_to_file(routers)
            
            # –û—á–∏—â–∞—î–º–æ –∫–µ—à –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            self.router_manager.clear_cache()
            
            logging.info(f"–°–∫—Ä–∏–ø—Ç '{script_name}' –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}")
            return True, f"–°–∫—Ä–∏–ø—Ç '{script_name}' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ '{script_name}' –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞: {e}"
    
    def remove_script_from_router(self, router_name: str, script_name: str) -> Tuple[bool, str]:
        """–í–∏–¥–∞–ª—è—î —Å–∫—Ä–∏–ø—Ç –∑ —Ä–æ—É—Ç–µ—Ä–∞"""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ router_manager
            routers = self.router_manager.get_routers()
            
            if router_name not in routers:
                return False, f"–†–æ—É—Ç–µ—Ä '{router_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            if 'scripts' not in routers[router_name]:
                return False, f"–£ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}' –Ω–µ–º–∞—î —Å–ø–∏—Å–∫—É —Å–∫—Ä–∏–ø—Ç—ñ–≤"
            
            if script_name not in routers[router_name]['scripts']:
                return False, f"–°–∫—Ä–∏–ø—Ç '{script_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–æ—É—Ç–µ—Ä—ñ '{router_name}'"
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Å–∫—Ä–∏–ø—Ç
            routers[router_name]['scripts'].remove(script_name)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ —Ñ–∞–π–ª
            self._save_routers_to_file(routers)
            
            # –û—á–∏—â–∞—î–º–æ –∫–µ—à –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
            self.router_manager.clear_cache()
            
            logging.info(f"–°–∫—Ä–∏–ø—Ç '{script_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}")
            return True, f"–°–∫—Ä–∏–ø—Ç '{script_name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —Ä–æ—É—Ç–µ—Ä–∞ '{router_name}'"
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞ '{script_name}' –∑ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç–∞: {e}"
    
    def get_router_scripts(self, router_name: str) -> Tuple[bool, List[str]]:
        """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∏–ø—Ç—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–µ—à"""
        try:
            router = self.router_manager.get_router(router_name)
            if not router:
                return False, []
            
            scripts = router.get('scripts', [])
            return True, scripts
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä–∏–ø—Ç—ñ–≤ —Ä–æ—É—Ç–µ—Ä–∞ {router_name}: {e}")
            return False, []
    
    def validate_script_name(self, script_name: str) -> bool:
        """–í–∞–ª—ñ–¥—É—î –Ω–∞–∑–≤—É —Å–∫—Ä–∏–ø—Ç–∞"""
        if not script_name or not script_name.strip():
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏
        forbidden_chars = ['/', '\\', ':', '*', '?', '"', '<', '>', '|']
        return not any(char in script_name for char in forbidden_chars)
    
    def validate_user_id(self, user_id: str) -> bool:
        """–í–∞–ª—ñ–¥—É—î ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü–µ —á–∏—Å–ª–æ
            int(user_id)
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É (Telegram ID –∑–∞–∑–≤–∏—á–∞–π 7-10 —Ü–∏—Ñ—Ä)
            return 7 <= len(user_id) <= 10
        except ValueError:
            return False
    
    def clear_cache(self):
        """–û—á–∏—â–∞—î –∫–µ—à router_manager"""
        self.router_manager.clear_cache()
    
    def _save_routers_to_file(self, routers: Dict[str, Any]):
        """–ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ —Ä–æ—É—Ç–µ—Ä—ñ–≤ —É —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as file:
                json.dump(routers, file, indent=2, ensure_ascii=False)
            logging.info(f"–î–∞–Ω—ñ —Ä–æ—É—Ç–µ—Ä—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª {self.config_file}")
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–æ—É—Ç–µ—Ä—ñ–≤: {e}")
            raise 